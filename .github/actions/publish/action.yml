name: Publish Distribution
description: Build the package at a given tag and publish to TestPyPI and PyPI.

inputs:
  tag:
    description: Tag to check out (vX.Y.Z)
    required: true
  version:
    description: Version without leading v (X.Y.Z)
    required: true
  test_pypi_token:
    description: API token for TestPyPI
    required: true
  pypi_token:
    description: API token for PyPI
    required: true

runs:
  using: composite
  steps:
    - name: Checkout at tag
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - shell: bash
      run: |
        git fetch --tags --force --prune
        git checkout "refs/tags/${{ inputs.tag }}"
        echo "Building from ${{ inputs.tag }}"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Detect package name from pyproject.toml
      id: pkg
      shell: bash
      run: |
        set -euo pipefail
        if [ ! -f pyproject.toml ]; then
          echo "::error::pyproject.toml not found at repository root" >&2
          exit 1
        fi
        NAME="$(awk 'BEGIN{inproj=0} /^\[project\]/{inproj=1; next} /^\[/{inproj=0} inproj && match($0,/^\s*name\s*=\s*\"(.*)\"\s*$/,m){print m[1]; exit}' pyproject.toml)"
        if [ -z "${NAME}" ]; then
          echo "::error::Could not determine [project].name from pyproject.toml" >&2
          exit 1
        fi
        IMPORT_NAME="$(printf '%s' "${NAME}" | tr '-' '_')"
        echo "Detected distribution name: ${NAME}"
        echo "Detected import name: ${IMPORT_NAME}"
        echo "PACKAGE_NAME=${NAME}" >> "$GITHUB_ENV"
        echo "IMPORT_NAME=${IMPORT_NAME}" >> "$GITHUB_ENV"

    - name: Install build and twine
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build sdist and wheel
      shell: bash
      run: python -m build

    - name: Upload to TestPyPI
      shell: bash
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.test_pypi_token }}
      run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*

    - name: Wait a bit for TestPyPI to index the package
      shell: bash
      run: sleep 30

    - name: Create clean venv and install from TestPyPI
      shell: bash
      run: |
        python -m venv .venv_test
        . .venv_test/bin/activate
        python -m pip install --upgrade pip
        pip install --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple \
          "${PACKAGE_NAME}==${{ inputs.version }}"

    - name: Verify installed version
      uses: ./.github/actions/verify-version
      with:
        package: ${{ env.IMPORT_NAME }}
        expected: ${{ inputs.version }}

    - name: Upload to PyPI
      if: success()
      shell: bash
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ inputs.pypi_token }}
      run: twine upload dist/*
